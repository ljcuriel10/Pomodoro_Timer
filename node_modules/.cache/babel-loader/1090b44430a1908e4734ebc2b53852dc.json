{"ast":null,"code":"var _jsxFileName = \"/Users/ljcuriel/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Timer.jsx\";\nimport React from 'react';\nexport default function Timer() {\n  const [timer, setTimer] = useState(sessionLength);\n  useInterval(() => {\n    // ToDo: Implement what should happen when the timer is running\n    setTimer(prevTime => {\n      const newTime = prevTime - 1;\n\n      if (newTime >= 0) {\n        return prevTime - 1;\n      }\n\n      if (currentSession === \"Focusing for 25:00 minutes\") {\n        setCurrentSession('On Break for 05:00 minutes');\n        setTimer(breakDuration);\n      } else if (currentSession === \"On Break for 05:00 minutes\") {\n        setCurrentSession(\"Focusing for 25:00 minutes\");\n        setTimer(sessionLength);\n      }\n    });\n  }, isTimerRunning ? 1000 : null);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  }, currentSession), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }\n  }, secondsToDuration(timer), \" remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"1500\",\n    \"aria-valuenow\": count // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: `%`\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  })))));\n}","map":{"version":3,"sources":["/Users/ljcuriel/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Timer.jsx"],"names":["React","Timer","timer","setTimer","useState","sessionLength","useInterval","prevTime","newTime","currentSession","setCurrentSession","breakDuration","isTimerRunning","secondsToDuration","height","count","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,eAAe,SAASC,KAAT,GAAgB;AAC3B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBC,QAAQ,CAACC,aAAD,CAAlC;AAGAC,EAAAA,WAAW,CACP,MAAM;AACJ;AACAH,IAAAA,QAAQ,CAACI,QAAQ,IAAI;AACnB,YAAMC,OAAO,GAAGD,QAAQ,GAAG,CAA3B;;AACA,UAAGC,OAAO,IAAI,CAAd,EAAgB;AACd,eAAOD,QAAQ,GAAG,CAAlB;AACD;;AACD,UAAGE,cAAc,KAAK,4BAAtB,EAAmD;AACjDC,QAAAA,iBAAiB,CAAC,4BAAD,CAAjB;AACAP,QAAAA,QAAQ,CAACQ,aAAD,CAAR;AACD,OAHD,MAGM,IAAGF,cAAc,KAAK,4BAAtB,EAAoD;AACxDC,QAAAA,iBAAiB,CAAC,4BAAD,CAAjB;AACAP,QAAAA,QAAQ,CAACE,aAAD,CAAR;AACD;AACF,KAZO,CAAR;AAaD,GAhBM,EAkBPO,cAAc,GAAG,IAAH,GAAU,IAlBjB,CAAX;AAoBA,sBACI,uDACA;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAI,mBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCH,cAAjC,CAFF,eAIE;AAAG,IAAA,SAAS,EAAC,MAAb;AAAoB,mBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,iBAAiB,CAACX,KAAD,CADpB,eAJF,CADA,CADA,eAWF;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAAEY,MAAAA,MAAM,EAAE;AAAV,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,qBAAc,GAHhB;AAIE,qBAAc,MAJhB;AAKE,qBAAgBC,KALlB,CAKyB;AALzB;AAME,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAG;AAAV,KANT,CAMyB;AANzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CAXE,CADJ;AA4BH","sourcesContent":["import React from 'react';\n\nexport default function Timer(){\n    const [timer, setTimer] = useState(sessionLength)\n\n\n    useInterval(\n        () => {\n          // ToDo: Implement what should happen when the timer is running\n          setTimer(prevTime => {\n            const newTime = prevTime - 1;\n            if(newTime >= 0){\n              return prevTime - 1\n            }\n            if(currentSession === \"Focusing for 25:00 minutes\"){\n              setCurrentSession('On Break for 05:00 minutes');\n              setTimer(breakDuration)\n            }else if(currentSession === \"On Break for 05:00 minutes\") {\n              setCurrentSession(\"Focusing for 25:00 minutes\")\n              setTimer(sessionLength)\n            }\n          })\n        },\n        \n        isTimerRunning ? 1000 : null\n      );\n    return (\n        <>\n        <div className=\"row mb-2\">\n        <div className=\"col\">\n          {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\n          <h2 data-testid=\"session-title\">{currentSession}</h2>\n          {/* TODO: Update message below to include time remaining in the current session */}\n          <p className=\"lead\" data-testid=\"session-sub-title\">\n            {secondsToDuration(timer)} remaining\n          </p>\n        </div>\n      </div>\n      <div className=\"row mb-2\">\n        <div className=\"col\">\n          <div className=\"progress\" style={{ height: \"20px\" }}>\n            <div\n              className=\"progress-bar\"\n              role=\"progressbar\"\n              aria-valuemin=\"0\"\n              aria-valuemax=\"1500\"\n              aria-valuenow= {count} // TODO: Increase aria-valuenow as elapsed time increases\n              style={{ width: `%` }} // TODO: Increase width % as elapsed time increases\n            />\n          </div>\n        </div>\n      </div>\n      </>\n      )\n}"]},"metadata":{},"sourceType":"module"}