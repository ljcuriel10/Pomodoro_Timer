{"ast":null,"code":"var _jsxFileName = \"/Users/ljcuriel/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js\";\nimport React, { useEffect, useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\nimport { PropTypes } from \"prop-types\";\nimport Session from \"./Session\";\nimport Break from \"./Break\";\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [sessionDuration, setSessionDuration] = useState(1500);\n  const [timer, setTimer] = useState(sessionDuration);\n  const [breakDuration, setBreakDuration] = useState(300);\n  const [currentSession, setCurrentSession] = useState(`Focusing for 25:00 minutes`);\n  useEffect(() => {\n    setTimer(sessionDuration);\n  }, [sessionDuration]);\n  useInterval(() => {\n    // ToDo: Implement what should happen when the timer is running\n    setTimer(prevTime => {\n      const newTime = prevTime - 1;\n\n      if (newTime >= 0) {\n        return prevTime - 1;\n      }\n\n      if (currentSession === \"Focusing for 25:00 minutes\") {\n        setCurrentSession('On Break for 05:00 minutes');\n        setTimer(breakDuration);\n      } else if (currentSession === \"On Break for 05:00 minutes\") {\n        setCurrentSession(\"Focusing for 25:00 minutes\");\n        setTimer(sessionDuration);\n      }\n    });\n  }, isTimerRunning ? 1000 : null);\n\n  function playPause() {\n    setIsTimerRunning(prevState => !prevState);\n  }\n\n  const minusHandler = () => {\n    const newTime = sessionDuration - 300;\n\n    if (newTime < 0) {\n      setSessionDuration(300);\n    } else {\n      setSessionDuration(newTime);\n    }\n\n    ;\n  };\n\n  const plusHandler = () => {\n    const newTime = sessionDuration + 300;\n\n    if (newTime > 3600) {\n      setSessionDuration(3600);\n    } else {\n      setSessionDuration(newTime);\n    }\n  };\n\n  const minusDuration = () => {\n    const newDuration = breakDuration - 60;\n\n    if (newDuration < 60) {\n      setBreakDuration(60);\n    } else {\n      setBreakDuration(newDuration);\n    }\n  };\n\n  const plusDuration = () => {\n    const newDuration = breakDuration + 60;\n\n    if (newDuration > 900) {\n      setBreakDuration(900);\n    } else {\n      setBreakDuration(newDuration);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Session, {\n    sessionDuration: sessionDuration,\n    setSessionDuration: setSessionDuration,\n    plusHandler: plusHandler,\n    minusHandler: minusHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Break, {\n    breakDuration: breakDuration,\n    setBreakDuration: setBreakDuration,\n    minusDuration: minusDuration,\n    plusDuration: plusDuration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn-group btn-group-lg mb-2\",\n    role: \"group\",\n    \"aria-label\": \"Timer controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-primary\",\n    \"data-testid\": \"play-pause\",\n    title: \"Start or pause timer\",\n    onClick: playPause,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classNames({\n      oi: true,\n      \"oi-media-play\": !isTimerRunning,\n      \"oi-media-pause\": isTimerRunning\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-secondary\",\n    title: \"Stop the session\",\n    onClick: () => setIsTimerRunning(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"oi oi-media-stop\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 15\n    }\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, currentSession), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }, secondsToDuration(timer), \" remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"1500\",\n    \"aria-valuenow\": \"0\" // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: `0%`\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 15\n    }\n  }))))));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/ljcuriel/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useEffect","useState","classNames","useInterval","minutesToDuration","secondsToDuration","PropTypes","Session","Break","Pomodoro","isTimerRunning","setIsTimerRunning","sessionDuration","setSessionDuration","timer","setTimer","breakDuration","setBreakDuration","currentSession","setCurrentSession","prevTime","newTime","playPause","prevState","minusHandler","plusHandler","minusDuration","newDuration","plusDuration","oi","height","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport {minutesToDuration, secondsToDuration} from \"../utils/duration\"\nimport { PropTypes } from \"prop-types\"\nimport Session from \"./Session\"\nimport Break from \"./Break\"\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [ sessionDuration, setSessionDuration ] = useState(1500);\n  const [timer, setTimer] = useState(sessionDuration);\n  const [breakDuration,setBreakDuration] = useState(300);\n  const [currentSession, setCurrentSession] = useState(`Focusing for 25:00 minutes`);\n\n  useEffect(() => {\n    setTimer(sessionDuration)\n  }, [sessionDuration])\n  \n  useInterval(\n    () => {\n      // ToDo: Implement what should happen when the timer is running\n      setTimer(prevTime => {\n        const newTime = prevTime - 1;\n        if(newTime >= 0){\n          return prevTime - 1\n        }\n        if(currentSession === \"Focusing for 25:00 minutes\"){\n          setCurrentSession('On Break for 05:00 minutes');\n          \n          setTimer(breakDuration)\n        }else if(currentSession === \"On Break for 05:00 minutes\") {\n          setCurrentSession(\"Focusing for 25:00 minutes\")\n          setTimer(sessionDuration)\n        }\n      })\n        \n    },\n    \n    isTimerRunning ? 1000 : null\n  );\n\n  function playPause() {\n    setIsTimerRunning((prevState) => !prevState);\n  }\n  const minusHandler = () => {\n    const newTime = sessionDuration - 300;\n    if(newTime < 0){\n      setSessionDuration(300);\n    } else{\n      setSessionDuration(newTime);\n    };\n  };\n\n  const plusHandler = () => {\n    const newTime = sessionDuration + 300\n    if( newTime > 3600){\n      setSessionDuration(3600)\n    } else{\n      setSessionDuration(newTime);\n    }\n  }\n \n  const minusDuration = () => {\n    const newDuration = breakDuration - 60;\n    if(newDuration < 60){\n      setBreakDuration(60);\n    } else{\n      setBreakDuration(newDuration);\n    }\n  }\n\n  const plusDuration = () => {\n    const newDuration = breakDuration + 60;\n    if(newDuration > 900){\n      setBreakDuration(900)\n    }else{\n      setBreakDuration(newDuration)\n    }\n  };\n\n\n  return (\n    <div className=\"pomodoro\">\n      <Session \n        sessionDuration={sessionDuration} setSessionDuration={setSessionDuration}\n        plusHandler={plusHandler} minusHandler={minusHandler} \n      />\n      <Break\n        breakDuration={breakDuration} setBreakDuration={setBreakDuration}\n        minusDuration={ minusDuration} plusDuration={plusDuration}\n       />\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !isTimerRunning,\n                  \"oi-media-pause\": isTimerRunning,\n                })}\n              />\n            </button>\n            {/* TODO: Implement stopping the current focus or break session and disable when there is no active session */}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              title=\"Stop the session\"\n              onClick={ () => setIsTimerRunning(false)}\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      <div>\n        {/* TODO: This area should show only when a focus or break session is running or pauses */}\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\n            <h2 data-testid=\"session-title\">{currentSession}</h2>\n            {/* TODO: Update message below to include time remaining in the current session */}\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n              {secondsToDuration(timer)} remaining\n            </p>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"1500\"\n                aria-valuenow= \"0\" // TODO: Increase aria-valuenow as elapsed time increases\n                style={{ width: `0%` }} // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}