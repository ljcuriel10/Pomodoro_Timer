{"ast":null,"code":"var _jsxFileName = \"/Users/ljcuriel/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\nimport { PropTypes } from \"prop-types\";\nimport Break from \"./Break\";\nimport Session from \"./Session\";\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [breakDuration, setBreakDuration] = useState(300);\n  const [sessionLength, setSessionLength] = useState(1500);\n  const [count, setCount] = useState(0);\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [timer, setTimer] = useState(1500);\n  const [currentSession, setCurrentSession] = useState(`Focusing for 25:00 minutes`);\n  useInterval(() => {\n    // ToDo: Implement what should happen when the timer is running\n    setTimer(prevTime => {\n      const newTime = prevTime - 1;\n\n      if (newTime >= 0) {\n        return prevTime - 1;\n      }\n\n      if (currentSession === \"Focusing for 25:00 minutes\") {\n        setCurrentSession('On Break for 05:00 minutes');\n      } else {\n        setTimer(0);\n      }\n    });\n    setBreakDuration(prevTime => {\n      const newTime = prevTime - 1;\n\n      if (newTime >= 0) {\n        return prevTime - 1;\n      }\n\n      if (currentSession === \"On Break for 05:00 minutes\") {\n        setCurrentSession('Focusing for 25:00 minutes');\n      } else {\n        setBreakDuration(0);\n      }\n    });\n    console.log(currentSession);\n    setCount(count + .065);\n  }, isTimerRunning ? 1 : null);\n\n  function playPause() {\n    setIsTimerRunning(prevState => !prevState);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Break, {\n    breakDuration: breakDuration,\n    setBreakDuration: setBreakDuration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Session, {\n    sessionLength: sessionLength,\n    setSessionLength: setSessionLength,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn-group btn-group-lg mb-2\",\n    role: \"group\",\n    \"aria-label\": \"Timer controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-primary\",\n    \"data-testid\": \"play-pause\",\n    title: \"Start or pause timer\",\n    onClick: playPause,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classNames({\n      oi: true,\n      \"oi-media-play\": !isTimerRunning,\n      \"oi-media-pause\": isTimerRunning\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-secondary\",\n    title: \"Stop the session\",\n    onClick: () => setIsTimerRunning(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"oi oi-media-stop\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 15\n    }\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, currentSession), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, secondsToDuration(timer), \" remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"1500\",\n    \"aria-valuenow\": count // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: `${count}%`\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 15\n    }\n  }))))));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/ljcuriel/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","minutesToDuration","secondsToDuration","PropTypes","Break","Session","Pomodoro","breakDuration","setBreakDuration","sessionLength","setSessionLength","count","setCount","isTimerRunning","setIsTimerRunning","timer","setTimer","currentSession","setCurrentSession","prevTime","newTime","console","log","playPause","prevState","oi","height","width"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport {minutesToDuration, secondsToDuration} from \"../utils/duration\"\nimport { PropTypes } from \"prop-types\"\nimport Break from \"./Break\"\nimport Session from \"./Session\"\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [breakDuration,setBreakDuration] = useState(300);\n  const [ sessionLength, setSessionLength ] = useState(1500);\n  const [count, setCount] = useState(0)\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [timer, setTimer] = useState(1500)\n  const [currentSession, setCurrentSession] = useState(`Focusing for 25:00 minutes`);\n  useInterval(\n    () => {\n      // ToDo: Implement what should happen when the timer is running\n      setTimer(prevTime => {\n        const newTime = prevTime - 1;\n        if(newTime >= 0){\n          return prevTime - 1\n        }\n        if(currentSession === \"Focusing for 25:00 minutes\"){\n          setCurrentSession('On Break for 05:00 minutes');\n        }else{\n          setTimer(0)\n        }\n      })\n      setBreakDuration(prevTime => {\n        const newTime = prevTime - 1;\n        if(newTime >= 0){\n          return prevTime - 1\n        }\n        if(currentSession === \"On Break for 05:00 minutes\"){\n          setCurrentSession('Focusing for 25:00 minutes');\n        }else{\n          setBreakDuration(0)\n        }\n      })\n      console.log(currentSession)\n      setCount(count+ .065)\n    },\n    \n    isTimerRunning ? 1 : null\n  );\n\n  function playPause() {\n    setIsTimerRunning((prevState) => !prevState);\n  }\n  \n\n\n  return (\n    <div className=\"pomodoro\">\n      <Break breakDuration={breakDuration} setBreakDuration={setBreakDuration}/>\n      <Session sessionLength={sessionLength} setSessionLength={setSessionLength}/>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !isTimerRunning,\n                  \"oi-media-pause\": isTimerRunning,\n                })}\n              />\n            </button>\n            {/* TODO: Implement stopping the current focus or break session and disable when there is no active session */}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              title=\"Stop the session\"\n              onClick={ () => setIsTimerRunning(false)}\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      <div>\n        {/* TODO: This area should show only when a focus or break session is running or pauses */}\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\n            <h2 data-testid=\"session-title\">{currentSession}</h2>\n            {/* TODO: Update message below to include time remaining in the current session */}\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n              {secondsToDuration(timer)} remaining\n            </p>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"1500\"\n                aria-valuenow= {count} // TODO: Increase aria-valuenow as elapsed time increases\n                style={{ width: `${count}%` }} // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}